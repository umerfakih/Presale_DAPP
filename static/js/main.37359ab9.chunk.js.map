{"version":3,"sources":["Navbar.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","account","className","App","content","myStyle","color","backgroundColor","useState","refresh","setrefresh","loading2","setloading2","setAccount","loading","setLoading","TokenSoldInPresale","setTokenSoldInPresale","TokenPriceInPresale","setTokenPriceInPresale","inputfieldchange","setinputfieldchange","presalecontractinstance","setpresalecontractinstance","loadWeb3","window","ethereum","web3","Web3","enable","alert","loadBlockchainData","eth","getAccounts","accounts","length","net","getId","presalecontract","Contract","CrowdsaleAbi","abi","methods","tokenprice","call","tokenpriceofpresale","totalsold","totalsoldofpresale","utils","fromWei","totalsoldofpresaleinether","onsubmit","console","log","parseFloat","onsendbuytransaction","a","toWei","toString","amountofethinwei","buyTokens","send","from","value","once","recepient","on","walletAddress","request","method","params","eth_accounts","location","reload","useEffect","class","style","width","placeholder","onChange","e","target","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"0tlIAaeA,EAXA,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAChB,OACE,sBAAKC,UAAU,yCAAf,UACE,mBAAGA,UAAU,uBAAb,2BACA,oBAAIA,UAAU,aAAd,SACE,oBAAIA,UAAU,sBAAd,SAAqCD,U,SCsL9BE,MAzLf,WACE,IAQIC,EARAC,EAAU,CACZC,MAAO,QACPC,gBAAiB,WAInB,EAA8BC,mBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAGA,EAAgCF,oBAAS,GAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KAEA,EAA8BJ,mBAAS,IAAvC,mBAAOP,EAAP,KAAgBY,EAAhB,KACA,EAA8BL,oBAAS,GAAvC,mBAAOM,EAAP,KAAgBC,EAAhB,KACA,EAAoDP,mBAAS,GAA7D,mBAAOQ,EAAP,KAA2BC,EAA3B,KACA,EAAsDT,mBAAS,GAA/D,mBAAOU,EAAP,KAA4BC,EAA5B,KACA,EAAgDX,mBAAS,GAAzD,mBAAOY,EAAP,KAAyBC,EAAzB,KACA,EAA8Db,mBAAS,IAAvE,mBAAOc,EAAP,KAAgCC,EAAhC,KACMC,EAAQ,iDAAG,4FACXC,OAAOC,SADI,uBAEbD,OAAOE,KAAO,IAAIC,IAAKH,OAAOC,UAFjB,SAGPD,OAAOC,SAASG,SAHT,6BAKbJ,OAAOK,MACL,uEANW,2CAAH,qDAWRC,EAAkB,iDAAG,2GACzBhB,GAAW,GACmB,oBAAnBU,OAAOC,SAFO,wDAKnBC,EAAO,IAAIC,IAAKH,OAAOC,UALJ,SAOFC,EAAKK,IAAIC,cAPP,UASD,KAFlBC,EAPmB,QASZC,OATY,wDAYzBtB,EAAWqB,EAAS,IAZK,UAaDP,EAAKK,IAAII,IAAIC,QAbZ,WAcP,IAdO,+BAiBjBC,EAAkB,IAAIX,EAAKK,IAAIO,SACnCC,EAAaC,IACb,8CAEFlB,EAA2Be,GArBJ,UAuBWA,EAAgBI,QAC/CC,aACAC,OAzBoB,eAuBjBC,EAvBiB,iBA2BUP,EAAgBI,QAC9CI,YACAF,OA7BoB,eA2BjBG,EA3BiB,iBA8BiBpB,EAAKqB,MAAMC,QACjDF,EACA,SAhCqB,QA8BjBG,EA9BiB,OAmCvBjC,EAAsBiC,GACtB/B,EAAuB0B,GACvB9B,GAAW,GArCY,wBAuCvBU,OAAOK,MAAM,kDACblB,GAAY,GAxCW,4CAAH,qDAiDlBuC,EAAQ,iDAAG,2FACfC,QAAQC,IAAIC,WAAWlC,MACnBkC,WAAWlC,GAAoB,GAFpB,gCAGPmC,EAAqBnC,GAHd,6BAKbK,OAAOK,MAAM,0BALA,2CAAH,qDASRyB,EAAoB,iDAAG,WAAOC,GAAP,0FACrB7B,EAAO,IAAIC,IAAKH,OAAOC,UADF,SAGIC,EAAKqB,MAAMS,MAAMD,EAAEE,YAHvB,cAGrBC,EAHqB,gBAKrBrC,EAAwBoB,QAC3BkB,YACAC,KAAK,CAAEC,KAAM7D,EAAS8D,MAAOJ,IAC7BK,KAAK,aAAa,SAACC,GAClBxC,OAAOK,MAAM,aAEdoC,GAAG,SAAS,WACXzC,OAAOK,MAAM,aAZU,2CAAH,sDAiBpBqC,EAAa,iDAAG,wGACd1C,OAAOC,SAAS0C,QAAQ,CAC5BC,OAAQ,sBACRC,OAAQ,CACN,CACEC,aAAc,OALA,OASpB9C,OAAO+C,SAASC,SATI,2CAAH,qDA+DnB,OAnDAC,qBAAU,WACRlD,IACAO,IAEgB,IAAZtB,IACFC,EAAW,GACXqB,OAGD,CAACtB,IAGFL,GADc,IAAZU,EAEA,oBAAGZ,UAAU,cAAb,uBACaS,EAAW,8CAAyB,MAKjD,sBAAKT,UAAU,iBAAf,UACE,oBAAIA,UAAU,GAAd,sBACA,qBAAKA,UAAU,MAAf,SACE,qBAAKA,UAAU,WAAf,SACE,qBAAKyE,MAAM,OAAOC,MAAO,CAAEC,MAAO,QAASxE,WAA3C,SAEE,sBAAKsE,MAAM,YAAYC,MAAOvE,EAA9B,UACE,oBAAIsE,MAAM,aAAV,sBACA,mBAAGA,MAAM,YAAT,iBACA,mBAAGA,MAAM,aAAT,4CACA,wDAA2BzD,EAA3B,YACA,iCACE,qBAAKhB,UAAU,aAAf,SACE,uBACE4E,YAAY,uBACZf,MAAO3C,EACP2D,SA9EO,SAACC,GAC1B5B,QAAQC,IAAI2B,EAAEC,OAAOlB,OACrB1C,EAAoB2D,EAAEC,OAAOlB,YA+Ef,wBAAQ7D,UAAU,kBAAkBgF,QAAS/B,EAA7C,0BAIF,uDAA0BnC,iBAUtC,gCACE,cAAC,EAAD,CAAQf,QAASA,IAEJ,KAAZA,EACC,sBAAKC,UAAU,YAAf,UACG,IADH,qCAEqC,MAAO,IAC1C,wBAAQgF,QAASf,EAAjB,yBAGF/D,MC1KO+E,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDDQ,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,OAOJd,M","file":"static/js/main.37359ab9.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Navbar = ({ account }) => {\r\n  return (\r\n    <nav className=\"navbar navbar-dark bg-dark shadow mb-5\">\r\n      <p className=\"navbar-brand my-auto\">react website</p>\r\n      <ul className=\"navbar-nav\">\r\n        <li className=\"nav-item text-white\">{account}</li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React, { useEffect, useState } from 'react'\nimport Web3 from 'web3'\nimport Navbar from './Navbar'\nimport CrowdsaleAbi from './contracts/presale.json'\nfunction App() {\n  let myStyle = {\n    color: 'white',\n    backgroundColor: '#042743',\n    \n  }\n\n  const [refresh, setrefresh] = useState(0)\n\n  let content\n  const [loading2, setloading2] = useState(false)\n\n  const [account, setAccount] = useState('')\n  const [loading, setLoading] = useState(true)\n  const [TokenSoldInPresale, setTokenSoldInPresale] = useState(0)\n  const [TokenPriceInPresale, setTokenPriceInPresale] = useState(0)\n  const [inputfieldchange, setinputfieldchange] = useState(0)\n  const [presalecontractinstance, setpresalecontractinstance] = useState({})\n  const loadWeb3 = async () => {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    } else {\n      window.alert(\n        'Non-Ethereum browser detected. You should consider trying MetaMask!',\n      )\n    }\n  }\n\n  const loadBlockchainData = async () => {\n    setLoading(true)\n    if (typeof window.ethereum == 'undefined') {\n      return\n    }\n    const web3 = new Web3(window.ethereum)\n\n    const accounts = await web3.eth.getAccounts()\n\n    if (accounts.length === 0) {\n      return\n    }\n    setAccount(accounts[0])\n    const networkId = await web3.eth.net.getId()\n    if (networkId === 3) {\n\n\n      const presalecontract = new web3.eth.Contract(\n        CrowdsaleAbi.abi,\n        '0x348B4Ebd7dBef671881F5828fAfa7344e3BD3Fa1',\n      )\n      setpresalecontractinstance(presalecontract)\n\n      const tokenpriceofpresale = await presalecontract.methods\n        .tokenprice()\n        .call()\n\n      const totalsoldofpresale = await presalecontract.methods\n        .totalsold()\n        .call()\n      const totalsoldofpresaleinether = await web3.utils.fromWei(\n        totalsoldofpresale,\n        'ether',\n      )\n\n      setTokenSoldInPresale(totalsoldofpresaleinether)\n      setTokenPriceInPresale(tokenpriceofpresale)\n      setLoading(false)\n    } else {\n      window.alert('the contract not deployed to detected network.')\n      setloading2(true)\n    }\n  }\n\n  const changeininputfield = (e) => {\n    console.log(e.target.value)\n    setinputfieldchange(e.target.value)\n  }\n\n  const onsubmit = async () => {\n    console.log(parseFloat(inputfieldchange))\n    if (parseFloat(inputfieldchange) > 0) {\n      await onsendbuytransaction(inputfieldchange)\n    } else {\n      window.alert('null value not allowed')\n    }\n  }\n\n  const onsendbuytransaction = async (a) => {\n    const web3 = new Web3(window.ethereum)\n\n    const amountofethinwei = await web3.utils.toWei(a.toString())\n\n    await presalecontractinstance.methods\n      .buyTokens()\n      .send({ from: account, value: amountofethinwei })\n      .once('recepient', (recepient) => {\n        window.alert('sucess')\n      })\n      .on('error', () => {\n        window.alert('error ')\n      })\n\n  }\n\n  const walletAddress = async () => {\n    await window.ethereum.request({\n      method: 'eth_requestAccounts',\n      params: [\n        {\n          eth_accounts: {},\n        },\n      ],\n    })\n    window.location.reload()\n  }\n\n  useEffect(() => {\n    loadWeb3()\n    loadBlockchainData()\n\n    if (refresh === 1) {\n      setrefresh(0)\n      loadBlockchainData()\n    }\n    //esl\n  }, [refresh])\n\n  if (loading === true) {\n    content = (\n      <p className=\"text-center\">\n        Loading...{loading2 ? <div>loading....</div> : ''}\n      </p>\n    )\n  } else {\n    content = (\n      <div className=\"container my-4\">\n        <h2 className=\"\"> Presale</h2>\n        <div className=\"row\">\n          <div className=\"col-md-4\">\n            <div class=\"card\" style={{ width: '18rem', myStyle }}>\n              {/* <img src={\"\"} class=\"card-img-top\" alt=\"...\" /> */}\n              <div class=\"card-body\" style={myStyle}>\n                <h5 class=\"card-title\">Mytoken </h5>\n                <p class=\"card-text\">MKT</p>\n                <p class=\"caard-text\">Total raise 10 Million Tokens </p>\n                <p> TokenPriceInPresale : {TokenPriceInPresale} ether</p>\n                <form>\n                  <div className=\"form-group\">\n                    <input\n                      placeholder=\"input the eth amount\"\n                      value={inputfieldchange}\n                      onChange={changeininputfield}\n                    />\n                  </div>\n                  <button className=\"btn btn-primary\" onClick={onsubmit}>\n                    Buy TOken\n                  </button>\n                </form>\n                <p> TokenSoldInPresale : {TokenSoldInPresale}</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div>\n      <Navbar account={account} />\n\n      {account === '' ? (\n        <div className=\"container\">\n          {' '}\n          Connect your wallet to application{'   '}{' '}\n          <button onClick={walletAddress}>metamask</button>\n        </div>\n      ) : (\n        content\n      )}\n      {/* {content} */}\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}